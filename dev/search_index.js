var documenterSearchIndex = {"docs":
[{"location":"#CamMath.jl","page":"Home","title":"CamMath.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A package for image analysis of backscattered light","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Table-of-contents","page":"Home","title":"Table of contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Bernoulli-number","page":"Home","title":"Bernoulli number","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"bernoulliB(n::T; msg=true) where {T<:Integer}   \nbernoulliB_array(nmax::T; msg=true) where {T<:Integer}","category":"page"},{"location":"#CamMath.bernoulliB-Tuple{T} where T<:Integer","page":"Home","title":"CamMath.bernoulliB","text":"bernoulliB(n::T [; msg=true]) where {T<:Integer}\n\nBernoulli numbers of index n are defined by the recurrence relation\n\n    B_n = - frac1n+1sum_k=0^n-1frac(n+1)k(n+1-k)B_k\n\nwith B_0=1 and B_1=-12. Starting at B_0 is called the even index  convention (B_2n+1=0 rmfor n1).\n\nInteger-overflow protection (IOP): for n > 35 the output is autoconverted to  Rational{BigInt}. By default the capture message is activated:  \"Warning (IOP): bernoulliB converted to Rational{BigInt}\".\n\nExamples:\n\njulia> o = [bernoulliB(n) for n=0:5]; println(o)\nRational{Int64}[1//1, -1//2, 1//6, 0//1, -1//30, 0//1]\n\njulia> bernoulliB(60)\nWarning (IOP): bernoulliB converted to Rational{BigInt}\n-1215233140483755572040304994079820246041491//56786730\n\njulia> n = 60;\njulia> bernoulliB(n) == bernoulliB_array(n)[end]             \ntrue\n\n\n\n\n\n","category":"method"},{"location":"#CamMath.bernoulliB_array-Tuple{T} where T<:Integer","page":"Home","title":"CamMath.bernoulliB_array","text":"bernoulliB_array(nmax::T [; msg=true]) where {T<:Integer}\n\nBernoulli number array B_0cdots B_nmax, where nmax is the index of  the highest Bernoulli number of the array (NB.: not the array length).\n\nExamples:\n\njulia> o = bernoulliB_array(8); println(o)\nRational{Int64}[1//1, -1//2, 1//6, 0//1, -1//30, 0//1, 1//42, 0//1, -1//30]\n\njulia> o = bernoulliB_array(big(8)); println(o)\nRational{BigInt}[1//1, -1//2, 1//6, 0//1, -1//30, 0//1, 1//42, 0//1, -1//30]\n\njulia> n = 60; msg = false;\njulia>  bernoulliB(n; msg) == bernoulliB_array(n; msg)[end]            \ntrue\n\n\n\n\n\n","category":"method"},{"location":"#Factorial","page":"Home","title":"Factorial","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"bigfactorial(n::T; msg=true) where {T<:Integer}","category":"page"},{"location":"#CamMath.bigfactorial-Tuple{T} where T<:Integer","page":"Home","title":"CamMath.bigfactorial","text":"bigfactorial(n::Int [; msg=true])\n\nThe product of all positive integers less than or equal to n,\n\nn=n(n-1)(n-2)1\n\nBy definition\n\n0=1\n\nFor negative integers the factorial is zero. Integer-overflow protection:  for n > 20 the output is autoconverted to BigInt.  By default the capture message is activated:  \"Warning (IOP): bigfactorial converted to Rational{BigInt}\".\n\nExamples:\n\njulia> bigfactorial(20) == factorial(20)\ntrue\n\njulia> bigfactorial(21)\nWarning (IOP): bigfactorial converted to Rational{BigInt}\n51090942171709440000\n\njulia> bigfactorial(21; msg=false)\n51090942171709440000\n\njulia> factorial(21)\nWarning (IOP): bigfactorial converted to Rational{BigInt}\n\n\n\n\n\n","category":"method"}]
}
